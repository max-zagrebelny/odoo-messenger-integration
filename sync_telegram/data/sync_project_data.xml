<?xml version='1.0' encoding='UTF-8' ?>
<!-- Copyright 2021 Ilya Ilchenko <https://github.com/mentalko>
     Copyright 2021 Denis Mudarisov <https://github.com/trojikman>
     Copyright 2021-2022 Ivan Yelizariev <https://twitter.com/yelizariev>
     License MIT (https://opensource.org/licenses/MIT). -->
<odoo>
    <record id="telegram_project" model="sync.project">
        <field name="name">Telegram Integration</field>
        <field
            name="eval_context_ids"
            eval="[(4, ref('sync_project_context_telegram'))]"
        />
        <field
            name="common_code"
        ><![CDATA[
TELEGRAM_PARTNER = "TELEGRAM_PARTNER"
TELEGRAM_CHAT_MODEL = "TELEGRAM_CHAT_MODEL"
TELEGRAM_CHANNEL = "TELEGRAM_CHANNEL"

BUTTONS = ["Вказати електрону пошту", "Вказати номер телефону", "Зв'язатися з оператором"]

operators_user_list = list(map(int, params.OPERATOR_IDS.split(",")))
operators_partner_list = [env.user.browse(x).partner_id.id for x in operators_user_list]

odoobot_id = env.user.browse(1).partner_id.id


def user2name(user, second_text):
    name = user.first_name
    if user.last_name:
        name += ' %s' % user.last_name
    if user.username:
        name += ' (@%s)' % user.username
    return name, second_text

def get_right_buttons(partner, telegram_user_ref, bot_id):
    buttons = []
    if not partner.phone:
        buttons.append("Вказати номер телефону")
    if not partner.email:
        buttons.append("Вказати електрону пошту")
    if not get_link(TELEGRAM_CHANNEL, telegram_user_ref, bot_id):
        buttons.append("Зв'язатися з оператором")
    return buttons
        ]]></field>
    </record>
    <record id="telegram_project_secret" model="sync.project.secret">
        <field name="key">TELEGRAM_BOT_TOKEN</field>
        <field name="initial_value">6304211758:AAEDMP8LuQxU-82zRSzd4iJiZb0Q6atqYUI</field>
        <field name="description">
            Authentication token provided by https://t.me/BotFather
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_project_param_welcome" model="sync.project.text">
        <field name="key">TELEGRAM_WELCOME_MESSAGE</field>
        <field name="initial_value">Добрий день, чим можу Вам допомогти?</field>
        <field name="description">
            Message that is sent to a user on first bot usage
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_project_param_prefix" model="sync.project.param">
        <field name="key">PARTNER_NAME_TEMPLATE</field>
        <field name="initial_value">%s [%s]</field>
        <field name="description">
            Template for new partner name. Must have double %s
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="record-name-prefix_project-parameter" model="sync.project.param">
        <field name="key">CHAT_RECORD_NAME_TEMPLATE</field>
        <field name="initial_value">%s [%s]</field>
        <field name="description">
            Template for new record name. Must have double %s
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>

    <record id="record-bot-name" model="sync.project.param">
        <field name="key">BOT_NAME</field>
        <field name="initial_value">bot_odoo_1</field>
        <field name="description">
            Name of Bot
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>

    <record id="telegram_project_param_model" model="sync.project.param">
        <field name="key">CHAT_MODEL</field>
        <field name="initial_value">crm.lead</field>
        <field name="description">
            Record of which model is created on incoming message from new telegram user
            (e.g. crm.lead, project.task,
            etc). The model must have field partner_id
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_project_param_mail_chat" model="sync.project.param">
        <field name="key">WEBHOOK_CHAT</field>
        <field name="initial_value">yes</field>
        <field name="description">
            Set to "no" to disable redirecting telegram messages to odoo chat
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_project_param_operator_id" model="sync.project.param">
        <field name="key">OPERATOR_IDS</field>
        <field name="initial_value">2</field>
        <field name="description">
            Comma-separated list of user ids that will added to Discuss chat on getting
            message from new telegram user
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_task_setup" model="sync.task">
        <field name="name">Setup</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="telegram_project" />
        <field
            name="code"
        ><![CDATA[

def handle_button():
    telegram.setWebhook(webhooks.TELEGRAM, allowed_updates=["message", "edited_message"])

        ]]></field>
    </record>
    <record id="telegram_task_tele2odoo" model="sync.task">
        <field name="name">Process Telegram Messages</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="telegram_project" />
        <field
            name="code"
        ><![CDATA[
def handle_webhook(httprequest):
    data = json.loads(httprequest.data.decode("utf-8"))
    log("Raw data: %s" % data, LOG_DEBUG)

    update = telegram.parse_data(data)
    print('update =', update)

    message = update.message or update.edited_message
    odoo_message_text = message.text or message.caption or ""
    print('odoo_message_text =', odoo_message_text)

    bot_id = bot.id
    telegram_user_ref = message.from_user.id
    print('telegram_user_ref =', telegram_user_ref)
    main_operator = env.user.browse(operators_user_list[0])
    print('operators_user_list =', operators_user_list)
    print('main_operator =', main_operator)

    def partner_vals(update, telegram_user_ref):
        name = update.message.from_user.first_name
        second = update.message.from_user.last_name
        if second:
            name += ' %s' % second
        name += ' [' + params.BOT_NAME + ']'
        return {
            'name': name,
            #'lang': update.message.json.from.language_code,
            'image_1920': telegram.getUserPhoto(telegram_user_ref)
        }

    partner_kwargs = dict(update=update, telegram_user_ref=telegram_user_ref)
    partner, is_new_partner = get_partner_with_create(bot_id, telegram_user_ref, partner_vals, partner_kwargs)

    conn_with_operator = True if get_link(TELEGRAM_CHANNEL, telegram_user_ref, bot_id) else False
    print('Hello-----')
    if message.text == '/start':
        telegram.sendMessage(telegram_user_ref, "Вітаю, можете ввести Ваші дані", reply_markup=telegram.addKeyBoard(BUTTONS))
        return
    elif message.text == 'Вказати електрону пошту':
        telegram.sendMessage(telegram_user_ref, "Напишіть вашу електрону пошту \nНаприклад test@gmail.com",reply_markup=telegram.delKeyBoard())
        set_state(partner.id,bot_id,'mail')
        return
    elif message.text == 'Вказати номер телефону':
        telegram.sendMessage(telegram_user_ref, "Напишіть ваш номер телефону з командою \nНаприклад +380344553087",reply_markup=telegram.delKeyBoard())
        set_state(partner.id,bot_id,'phone')
        return
    elif get_state(partner.id, bot_id) == 'mail':
        mail = message.text
        if not re_match('[^@]+@[^@]+\.[^@]+',mail):
            telegram.sendMessage(telegram_user_ref, "Неправильно введена пошта. Спробуйте ще раз")
        else:
            partner.write({'email':mail})
            telegram.sendMessage(telegram_user_ref, "Дякую дані збережено", reply_markup=telegram.addKeyBoard(get_right_buttons(partner, telegram_user_ref, bot_id)))
        print('hello ----')
        set_state(partner.id,bot_id,'None')
        return
    elif get_state(partner.id,bot_id) == 'phone':
        phone = message.text
        if not re_match("^\\+?[1-9][0-9]{11,11}$",phone):
            telegram.sendMessage(telegram_user_ref, "Неправильно введений номер телефону. Спробуйте ще раз")
        else:
            partner.write({'phone':phone})
            telegram.sendMessage(telegram_user_ref, "Дякую дані збережено", reply_markup=telegram.addKeyBoard(get_right_buttons(partner, telegram_user_ref, bot_id)))
        print('hello ----')
        set_state(partner.id,bot_id,'None')
        return
    elif message.text == "Зв'язатися з оператором":
        conn_with_operator = True

    partner_ids = [partner.id] + operators_partner_list
    if conn_with_operator:
        channels, is_new_channel = multi_livechat.get_channel(TELEGRAM_CHANNEL, telegram_user_ref, partner.name, partner_ids, bot_id)
    print('------test')
    if params.CHAT_MODEL != "res.partner":
        record_link = get_link(TELEGRAM_CHAT_MODEL, telegram_user_ref, bot_id)
        print('record_link =', record_link)
        if not record_link and conn_with_operator:
            record = env[params.CHAT_MODEL].with_user(main_operator).create(
                {"name": partner.name, "partner_id": partner.id})
            print('record =', record)
            record.set_link(TELEGRAM_CHAT_MODEL, telegram_user_ref, bot_id, sync_date=None, allow_many2many=False)

            multi_livechat.message_post(record,
                                """<b><a href="/web#action=%s&active_id=mail.channel_%s">Chat with partner is created. </a></b>""" %
                                (env.ref("mail.action_discuss").id, channels[0].id))

            print('message "Chat with parnter created" is posted')

            multi_livechat.message_post(channels[0], """<b><a href="/web#id=%s&model=%s">Record is created. </a></b>""" %
                                (record.id, record._name))
            print('message "Record is created" is posted')
    print('test ---------')
    file_bin_data = []
    telegram_document = update.message.document
    telegram_photo = update.message.photo
    telegram_media = update.message.video or update.message.voice or update.message.video_note
    telegram_sticker = update.message.sticker

    print('update.message.text =', update.message.text)
    if not update.message.text:
        if telegram_photo and telegram_photo[-1].file_size < telegram.MAX_SIZE_TO_DOWNLOAD:
            log("telegram_photo: %s" % telegram_photo, LOG_INFO)
            file_bin_data = telegram.getMediaFile(telegram_user_ref, telegram_photo[-1])

        elif telegram_media and telegram_media.file_size < telegram.MAX_SIZE_TO_DOWNLOAD:
            log("telegram_media: %s" % telegram_media, LOG_INFO)
            file_bin_data = telegram.getMediaFile(telegram_user_ref, telegram_media)

        elif telegram_document and telegram_document.file_size < telegram.MAX_SIZE_TO_DOWNLOAD:
            log("telegram_document: %s" % telegram_document, LOG_INFO)
            file_bin_data = telegram.getDocumentFile(telegram_user_ref, telegram_document)

        elif telegram_photo or telegram_media or telegram_document:
            multi_livechat.message_post(channels[0],
                                "Incoming file is too big and cannot be downloaded due to Telegram API restirctions")
            telegram.sendMessage(telegram_user_ref, "File is too big, file size must not exceed 20 MB.")

        if telegram_sticker:
            log("telegram_sticker: %s" % telegram_sticker, LOG_INFO)
            multi_livechat.message_post(channels[0], telegram_sticker.emoji, author=partner.id)

    print('partner.id =', partner.id)

    if conn_with_operator:
        message_post(is_new_channel, channels[0], odoo_message_text, attachments=[file_bin_data], author=partner.id)


def message_post(is_new, *args, **kwargs):
    # TODO: move this code to main sync module
    print('is_new =', is_new)
    print('args =',args)
    print('kwargs =', kwargs)
    if is_new:
        # post message Asynchronous to flush current pollings
        args = (False,) + args
        print('args =', args)
        print('kwagrs =', kwargs)
        add_job('message_post')(*args, **kwargs)
    else:
        multi_livechat.message_post(*args, **kwargs)

        ]]></field>
    </record>
    <record id="telegram_trigger_button" model="sync.trigger.button">
        <field name="trigger_name">SETUP_TELEGRAM</field>
        <field name="name">Setup webhooks</field>
        <field name="sync_task_id" ref="telegram_task_setup" />
    </record>
    <record id="telegram_trigger_webhook" model="sync.trigger.webhook">
        <field name="trigger_name">TELEGRAM</field>
        <field name="active" eval="True" />
        <field name="name">Telegram updates</field>
        <field name="sync_task_id" ref="telegram_task_tele2odoo" />
        <field name="webhook_type">json</field>
    </record>
</odoo>
