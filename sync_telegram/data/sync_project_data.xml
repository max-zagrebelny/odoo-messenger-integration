<?xml version='1.0' encoding='UTF-8' ?>
<!-- Copyright 2021 Ilya Ilchenko <https://github.com/mentalko>
     Copyright 2021 Denis Mudarisov <https://github.com/trojikman>
     Copyright 2021-2022 Ivan Yelizariev <https://twitter.com/yelizariev>
     License MIT (https://opensource.org/licenses/MIT). -->
<odoo>
    <record id="sync_project_context_telegram" model="sync.project.context">
        <field name="name">telegram</field>
        <field name="display_name">Telegram</field>
    </record>

    <!--<record id="sync_image_icon_telegram" model="sync.image.icon">
        <field name="type_messenger">telegram</field>
    </record>-->

    <record id="telegram_project" model="sync.project">
        <field
            name="eval_context_ids"
            eval="ref('sync_project_context_telegram')"
        />
        <!--<field
                name="image_icon_id"
                eval="ref('sync_image_icon_telegram')"
        />-->
        <field
            name="common_code"
        ><![CDATA[
TELEGRAM_CHAT_MODEL = "TELEGRAM_CHAT_MODEL"
TELEGRAM_CHANNEL = "TELEGRAM_CHANNEL"

BUTTONS = ["Вказати електрону пошту", "Вказати номер телефону", "Зв'язатися з оператором"]

operators_user_list = bot.operator_ids.ids
operators_partner_list = [env.user.browse(x).partner_id.id for x in operators_user_list]

odoobot_id = env.user.browse(1).partner_id.id

def get_right_buttons(partner, telegram_user_ref, bot_id):
    buttons = []
    if not partner.phone:
        buttons.append("Вказати номер телефону")
    if not partner.email:
        buttons.append("Вказати електрону пошту")
    if not get_link(TELEGRAM_CHANNEL, telegram_user_ref, bot_id):
        buttons.append("Зв'язатися з оператором")
    return buttons
        ]]></field>
    </record>

    <record id="telegram_project_param_prefix" model="sync.project.param">
        <field name="key">PARTNER_NAME_TEMPLATE</field>
        <field name="initial_value">%s [%s]</field>
        <field name="description">
            Template for new partner name. Must have double %s
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>

    <record id="record-name-prefix_project-parameter" model="sync.project.param">
        <field name="key">CHAT_RECORD_NAME_TEMPLATE</field>
        <field name="initial_value">%s [%s]</field>
        <field name="description">
            Template for new record name. Must have double %s
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>

    <record id="telegram_project_param_model" model="sync.project.param">
        <field name="key">CHAT_MODEL</field>
        <field name="initial_value">crm.lead</field>
        <field name="description">
            Record of which model is created on incoming message from new telegram user
            (e.g. crm.lead, project.task,
            etc). The model must have field partner_id
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>

    <!--<record id="telegram_project_param_operator_id" model="sync.project.param">
        <field name="key">OPERATOR_IDS</field>
        <field name="initial_value">2</field>
        <field name="description">
            Comma-separated list of user ids that will added to Discuss chat on getting
            message from new telegram user
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>-->

    <record id="telegram_task_setup" model="sync.task">
        <field name="name">Setup</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="telegram_project" />
        <field
            name="code"
        ><![CDATA[
def handle_button():
    telegram.setWebhook(webhooks.TELEGRAM, allowed_updates=["message", "edited_message"])
        ]]></field>
    </record>

    <record id="telegram_task_remove" model="sync.task">
        <field name="name">Remove</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="telegram_project" />
        <field
            name="code"
        ><![CDATA[
def handle_button():
    telegram.removeWebhook()
        ]]></field>
    </record>

    <record id="telegram_task_tele2odoo" model="sync.task">
        <field name="name">Process Telegram Messages</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="telegram_project" />
        <field
            name="code"
        ><![CDATA[
def handle_webhook(httprequest):
  print('Process Telegram Messages')
  print('httprequest =',httprequest)
  data = json.loads(httprequest.data.decode("utf-8"))
  print('data =',data)
  log("Raw data: %s" % data, LOG_DEBUG)

  bot_name = bot.name
  bot_id = bot.id

  update = telegram.parse_data(data)
  print('update =',update)
  message = update.message or update.edited_message
  odoo_message_text = message.text or message.caption or ""
  print('odoo_message_text =',odoo_message_text)

  telegram_user_ref =  message.from_user.id
  print('telegram_user_ref =',telegram_user_ref)
  main_operator = env.user.browse(operators_user_list[0])
  print('operators_user_list =',operators_user_list)
  print('main_operator =',main_operator)

  def partner_vals(update, telegram_user_ref):
    name = update.message.from_user.first_name
    second = update.message.from_user.last_name
    if second:
        name += ' %s' % second
    name += ' [' + bot.name + ']'
    return {
        'name': name,
        'image_1920': telegram.getUserPhoto(telegram_user_ref)
    }

  partner_kwargs = dict(update=update, telegram_user_ref=telegram_user_ref)
  partner = get_partner(bot_id, telegram_user_ref, callback_func=partner_vals, callback_kwargs=partner_kwargs)

  conn_with_operator = True if get_link(TELEGRAM_CHANNEL, telegram_user_ref, bot_id) else False
  if message.text == '/start':
    telegram.sendMessage(telegram_user_ref, f"Вітаю, я {bot.name}. Для того щоб написати оператору натисніть кнопку 'Зв'язатися з оператором'. Для кращого співробітництва можете надати свої дані", reply_markup=telegram.addKeyBoard(BUTTONS))
    return
  elif message.text == '/test':
    telegram.sendMessage(telegram_user_ref, "Тестове повідомлення \n https://www.google.com.ua")
    return
  elif message.text == 'Вказати електрону пошту':
    telegram.sendMessage(telegram_user_ref, "Напишіть вашу електрону пошту \nНаприклад test@gmail.com",reply_markup=telegram.delKeyBoard())
    set_state(partner.id,bot_id,'mail')
    return
  elif message.text == "Зв'язатися з оператором":
    conn_with_operator = True
  elif get_state(partner.id, bot_id) == 'mail':
    mail = message.text
    if not re_match('[^@]+@[^@]+\.[^@]+',mail):
        telegram.sendMessage(telegram_user_ref, "Неправильно введена пошта. Спробуйте ще раз")
    else:
        partner.write({'email':mail})
        telegram.sendMessage(telegram_user_ref, "Дякую дані збережено", reply_markup=telegram.addKeyBoard(get_right_buttons(partner, telegram_user_ref, bot_id)))
        set_state(partner.id,bot_id,'None')
        return
  elif update.message.content_type == 'contact':
    if data['message']['from']['id'] !=  data['message']['contact']['user_id']:
        telegram.sendMessage(telegram_user_ref, "Треба поділитися своїм контактом")
        return
    set_state(partner.id,bot_id,'phone')
    partner.write({'phone':data['message']['contact']['phone_number'][1:]})
    telegram.sendMessage(telegram_user_ref, "Дякую дані збережено", reply_markup=telegram.addKeyBoard(get_right_buttons(partner, telegram_user_ref, bot_id)))
    set_state(partner.id,bot_id,'None')
    return

  partner_ids = [partner.id] + operators_partner_list
  is_new_channel = False
  if conn_with_operator:
    channels, is_new_channel = multi_livechat.get_channel(TELEGRAM_CHANNEL, telegram_user_ref, partner.name, partner_ids, bot_id)
  if params.CHAT_MODEL != "res.partner":
    record_link = get_link(TELEGRAM_CHAT_MODEL, telegram_user_ref, bot_id)
    print('record_link =', record_link)
    if not record_link and conn_with_operator:
        record = env[params.CHAT_MODEL].with_user(main_operator).create(
        {"name": partner.name, "partner_id": partner.id})
        print('record =', record)
        record.set_link(TELEGRAM_CHAT_MODEL, telegram_user_ref, bot_id, sync_date=None, allow_many2many=False)

        multi_livechat.message_post(record,
                                """<b><a href="/web#action=%s&active_id=mail.channel_%s">Chat with partner is created. </a></b>""" %
                                (env.ref("mail.action_discuss").id, channels[0].id))
        print('message "Chat with parnter created" is posted')


        multi_livechat.message_post(channels[0], """<b><a href="/web#id=%s&model=%s">Record is created. </a></b>""" %
                                (record.id, record._name))
        print('message "Record is created" is posted')

  file_bin_data = []
  telegram_document = update.message.document
  telegram_photo = update.message.photo
  telegram_media = update.message.video or update.message.voice or update.message.video_note
  telegram_sticker = update.message.sticker

  print('update.message.text =',update.message.text)
  if not update.message.text:
    if telegram_photo and telegram_photo[-1].file_size < telegram.MAX_SIZE_TO_DOWNLOAD:
        log("telegram_photo: %s" % telegram_photo, LOG_INFO)
        file_bin_data = telegram.getMediaFile(telegram_user_ref, telegram_photo[-1])

    elif telegram_media and telegram_media.file_size < telegram.MAX_SIZE_TO_DOWNLOAD:
        log("telegram_media: %s" % telegram_media, LOG_INFO)
        file_bin_data = telegram.getMediaFile(telegram_user_ref, telegram_media)

    elif telegram_document and telegram_document.file_size < telegram.MAX_SIZE_TO_DOWNLOAD:
        log("telegram_document: %s" % telegram_document, LOG_INFO)
        file_bin_data = telegram.getDocumentFile(telegram_user_ref, telegram_document)

    elif telegram_photo or telegram_media or telegram_document:
        multi_livechat.message_post(channels[0],
                                "Incoming file is too big and cannot be downloaded due to Telegram API restirctions")

        telegram.sendMessage(telegram_user_ref, "File is too big, file size must not exceed 20 MB.")

    if telegram_sticker:
        log("telegram_sticker: %s" % telegram_sticker, LOG_INFO)
        multi_livechat.message_post(channels[0], telegram_sticker.emoji, author=partner.id)
  print('partner.id =', partner.id)

  if conn_with_operator and not is_new_channel:
    message_post(is_new_channel, channels[0], odoo_message_text, attachments=[file_bin_data], author=partner.id)


def message_post(is_new, *args, **kwargs):
    # TODO: move this code to main sync module
    print('is_new =',is_new)
    if is_new:
      # post message Asynchronous to flush current pollings
      args = (False,) + args
      print('args =',args)
      print('kwagrs =', kwargs)
      add_job('message_post')(*args, **kwargs)
    else:
      multi_livechat.message_post(*args, **kwargs)

        ]]></field>
    </record>

    <record id="telegram_trigger_button" model="sync.trigger.button">
        <field name="trigger_name">SETUP_TELEGRAM</field>
        <field name="name">Setup webhooks</field>
        <field name="sync_task_id" ref="telegram_task_setup" />
        <field name="type_button">start</field>
    </record>

    <record id="telegram_trigger_button_remove" model="sync.trigger.button">
        <field name="trigger_name">REMOVE_WEBHOOK_TELEGRAM</field>
        <field name="name">Remove webhook telegram</field>
        <field name="sync_task_id" ref="telegram_task_remove"/>
        <field name="type_button">remove</field>
    </record>

    <record id="telegram_trigger_webhook" model="sync.trigger.webhook">
        <field name="trigger_name">TELEGRAM</field>
        <field name="active" eval="True" />
        <field name="name">Telegram updates</field>
        <field name="sync_task_id" ref="telegram_task_tele2odoo" />
        <field name="webhook_type">json</field>
    </record>

    <record id="telegram_task_odoo2tele" model="sync.task">
        <field name="name">Send response via Odoo</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="telegram_project" />
        <field
            name="code"
        ><![CDATA[
def handle_db(records):
    print('code Send response via Odoo')
    print(records)
    for mail_message in records:
        process_message(mail_message)

def process_message(message):
    print('message =',message)
    bot_id = bot.id
    channel = env["mail.channel"].browse(message.res_id)
    print('channel =',channel)
    if channel.channel_type != 'multi_livechat_telegram':
        return

    channel_link = channel.search_links(TELEGRAM_CHANNEL, bot_id)
    print('channel_link =',channel_link)
    if not channel_link:
        return

    telegram_user_ref = channel_link.external
    print('telegram_user_ref =',telegram_user_ref)
    #channel_link = get_link(TELEGRAM_CHANNEL, telegram_user_ref)

    partner = get_partner(bot_id, telegram_user_ref)
    print('odoobot_id =',odoobot_id)
    if partner.id == message.author_id.id or message.author_id.id == odoobot_id:
        # this message is from partner or odoo bot
        return

    log("MESSAGE from odoo: channel_id %s - author_id %s - attachment_ids: %s - message_text: %s" % (message.res_id, message.author_id.id, message.attachment_ids, message.body), LOG_DEBUG)
    print('message.body =',message.body)
    if message.body:
        message_html = "%s\n\n<i>%s</i>" % (message.body, message.author_id.name)
        buttons = get_right_buttons(partner, telegram_user_ref, bot_id)
        if len(buttons) == 0:
            telegram.sendMessage(telegram_user_ref, message_html, parse_mode='HTML', channel=channel, reply_markup=telegram.delKeyBoard())
        else:
            telegram.sendMessage(telegram_user_ref, message_html, parse_mode='HTML', channel=channel, reply_markup=telegram.addKeyBoard(buttons))

    print('message.attachment_ids =',message.attachment_ids)
    if message.attachment_ids:
        for attach in message.attachment_ids:
            log("ATTACHMENT from odoo: attach.id %s - name %s" % (attach.name, attach.id), LOG_INFO)
            print('attach =',attach)
            print('attach.mimetype =',attach.mimetype)
            if attach.mimetype and "/" in attach.mimetype and attach.mimetype.split("/")[0] == "image":
                if  attach.file_size < telegram.MAX_SIZE_IMAGE:
                    telegram.sendPhoto(telegram_user_ref, attach.datas, channel=channel)
                else:
                    channel.message_post(body="You cannot send more than 10 MB for photos.",
                        author_id=odoobot_id, message_type="comment", subtype_xmlid="mail.mt_comment")
            else:
                if  attach.file_size < telegram.MAX_SIZE_DOCUMENT:
                    telegram.sendDocument(telegram_user_ref, attach.name, attach.datas, channel=channel)
                else:
                    channel.message_post(body="You cannot send more than 50 MB for documents.",
                        author_id=odoobot_id, message_type="comment", subtype_xmlid="mail.mt_comment")



        ]]></field>
    </record>

    <record id="telegram_trigger_automation" model="sync.trigger.automation">
        <field name="trigger_name">ON_MESSAGE_POSTED</field>
        <field name="active" eval="True" />
        <field name="sync_task_id" ref="telegram_task_odoo2tele" />
        <field name="model_id" ref="mail.model_mail_message" />
        <field name="trigger">on_create</field>
        <field name="filter_pre_domain" />
        <field name="filter_domain">['&amp;',["model","=","mail.channel"], ["author_id.type_messenger", "=", "none"]]</field>
    </record>

    <record id="send-to-everyone--sync-task" model="sync.task">
        <field name="name">Send to everyone</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="telegram_project" />
        <field
            name="code"
        ><![CDATA[
def handle_db(records):
    bot_id = bot.id
    if records.project_id.id != bot_id:
        return
    channel_links = env["sync.link"].search([('bot_id', '=', bot_id),('relation', '=', 'TELEGRAM_CHANNEL')])
    if not channel_links:
        return
    external_user_refs = [channel.external for channel in channel_links]
    msg = records.msg if records.msg else ''
    link = records.link if records.link else ''
    message = msg+ '\n' + link
    if records.image:
      for user_ref in external_user_refs:
        telegram.sendPhoto(user_ref, records.image, caption=message)
    else:
      for user_ref in external_user_refs:
        send_telegram_message(user_ref, message)

def send_telegram_message(external_user_ref, message):
  telegram.sendMessage(external_user_ref, message)
]]></field>
    </record>

    <record id="send-to-everyone--db-trigger" model="sync.trigger.automation">
        <field name="trigger_name">SEND_TO_EVERYONE</field>
        <field name="active" eval="True" />
        <field name="sync_task_id" ref="send-to-everyone--sync-task" />
        <field name="model_id" ref="sync.model_send_to_everyone" />
        <field name="trigger">on_create</field>
    </record>
</odoo>
