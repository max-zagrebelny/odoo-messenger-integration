<?xml version='1.0' encoding='UTF-8' ?>
<!-- Copyright 2021-2022 Ivan Yelizariev <https://twitter.com/yelizariev>
     License MIT (https://opensource.org/licenses/MIT). -->
<odoo>
    <record id="sync_project_context_viber" model="sync.project.context">
        <field name="name">viber</field >
        <field name="display_name">Viber</field>
    </record>
    <record id="viber-integration--sync-project" model="sync.project">
        <field
            name="eval_context_ids"
            eval="ref('sync_project_context_viber')"
        />
        <field
            name="common_code"
        ><![CDATA[

VIBER_PARTNER="VIBER_PARTNER"
VIBER_CHANNEL="VIBER_CHANNEL"
VIBER_THREAD="VIBER_THREAD"

keyboard = {
            "Type": "keyboard",
            # "ButtonsGroupColumns":6,
            # "ButtonsGroupRows":7,
            "Buttons" : [{
                "Columns": 6,
                "Rows": 1,
                "BgColor": "#7394f2",
                "ActionType": "reply",
                "ActionBody": "/talk_with_operator",
                "Frame": {
                  "BorderWidth" : 0,
                  "CornerRadius": 10
                },
                "Text": "Зв'язатись з оператором"
            }]

}

phone = {
        "Columns": 6,
        "Rows": 1,
        "BgColor": "#7394f2",
        "Text": "Поділитись номером телефону",
        "ActionBody": "Поділитись номером телефону",
        "Frame": {
                  "BorderWidth" : 0,
                  "CornerRadius": 10
                },
        "ActionType": "share-phone",
}

email = {
          	    "Columns": 6,
                "Rows": 1,
                "BgColor": "#7394f2",
                "ActionType": "reply",
                "ActionBody": "/user_data",
                "Frame": {
                  "BorderWidth" : 0,
                  "CornerRadius": 10
                },
                "Text": "Вказати електронну адресу"
          	}



notification = {
      "Type":"rich_media",
      "ButtonsGroupColumns":6,
      "ButtonsGroupRows":7,
      "BgColor":"#FFFFFF",
      "Buttons":[
         {
            "Columns":6,
            "Rows":3,
            "ActionType":"open-url",
            "ActionBody":"https://www.google.com",
            "Image":"https://cdn.dribbble.com/users/48309/screenshots/16437054/media/cb92186b82222cbaa31a80aadd7c361f.png?resize=400x300&vertical=center"
         },
         {
            "Columns":6,
            "Rows":2,
            "Text":"<font color=#323232><b>Headphones with Microphone, On-ear Wired earphones</b></font><font color=#777777><br>Sound Intone </font><font color=#6fc133>$17.99</font>",
            "ActionType":"open-url",
            "ActionBody":"https://www.google.com",
            "TextSize":"medium",
            "TextVAlign":"middle",
            "TextHAlign":"left"
         },
         {
            "Columns":6,
            "Rows":1,
            "ActionType":"reply",
            "ActionBody":"https://www.google.com",
            "Text":"<font color=#ffffff>Buy</font>",
            "TextSize":"large",
            "BgColor": "#1bcf54",
            "TextVAlign":"middle",
            "TextHAlign":"middle",
            "Image":"https://s14.postimg.org/4mmt4rw1t/Button.png"
         },
         {
            "Columns":6,
            "Rows":1,
            "ActionType":"reply",
            "ActionBody":"https://www.google.com",
            "Text":"<font color=#8367db>MORE DETAILS</font>",
            "TextSize":"small",
            "TextVAlign":"middle",
            "TextHAlign":"middle"
         },
         {
            "Columns":6,
            "Rows":3,
            "ActionType":"open-url",
            "ActionBody":"https://www.google.com",
            "Image":"https://cdn.dribbble.com/users/48309/screenshots/16437054/media/c407e8c1d5fedacfca535b008b66202d.png?resize=400x300&vertical=center"
         },
         {
            "Columns":6,
            "Rows":2,
            "Text":"<font color=#323232><b>Hanes Men's Humor Graphic T-Shirt</b></font><font color=#777777><br>Hanes</font><font color=#6fc133>$10.99</font>",
            "ActionType":"open-url",
            "ActionBody":"https://www.google.com",
            "TextSize":"medium",
            "TextVAlign":"middle",
            "TextHAlign":"left"
         },
         {
            "Columns":6,
            "Rows":1,
            "ActionType":"reply",
            "ActionBody":"https://www.google.com",
            "Text":"<font color=#ffffff>Buy</font>",
            "BgColor": "#1bcf54",
            "TextSize":"large",
            "TextVAlign":"middle",
            "TextHAlign":"middle",
         },
         {
            "Columns":6,
            "Rows":1,
            "ActionType":"reply",
            "ActionBody":"https://www.google.com",
            "Text":"<font color=#8367db>MORE DETAILS</font>",
            "TextSize":"small",
            "TextVAlign":"middle",
            "TextHAlign":"middle"
         }
      ]
}
rich_media = viber_messages.RichMediaMessage(rich_media=notification, min_api_version=7)
keyboard_message = viber_messages.KeyboardMessage(tracking_data='tracking_data', keyboard=keyboard, min_api_version=7)

def check_partner(partner):
  if not partner.email:
    keyboard["Buttons"].append(email)
  if not partner.phone:
    keyboard["Buttons"].append(phone)
  keyboard_message = viber_messages.KeyboardMessage(tracking_data='tracking_data', keyboard=keyboard, min_api_version=7)

]]></field>
    </record>
    <record id="bot-avatar-url--project-parameter" model="sync.project.param">
        <field name="key">BOT_AVATAR_URL</field>
        <field name="value" />
        <field name="description">Keep empty to use Company logo</field>
        <field name="url" eval="" />
        <field name="project_id" ref="viber-integration--sync-project" />
    </record>
    <record id="chat-model--project-parameter" model="sync.project.param">
        <field name="key">CHAT_MODEL</field>
        <field name="value">crm.lead</field>
        <field name="description">
            Record of which model is created on incoming message from new Viber user
            (e.g. crm.lead, project.task, etc). The model must have fields name and
            partner_id
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="viber-integration--sync-project" />
    </record>
    <record id="webhook-chat--project-parameter" model="sync.project.param">
        <field name="key">WEBHOOK_CHAT</field>
        <field name="value">yes</field>
        <field name="description">
            Set to "no" to disable redirecting viber messages to odoo chat
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="viber-integration--sync-project" />
    </record>
    <record id="setup--sync-task" model="sync.task">
        <field name="name">Setup</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="viber-integration--sync-project" />
        <field
            name="code"
        ><![CDATA[def handle_button():
    # viber_api.unset_webhook()
    viber_api.set_webhook(webhooks.VIBER)

        ]]></field>
    </record>
    <record id="setup-webhook--manual-trigger" model="sync.trigger.button">
        <field name="trigger_name">SETUP_WEBHOOK</field>
        <field name="sync_task_id" ref="setup--sync-task" />
        <field name="type_button">start</field>
    </record>

    <record id="viber_task_remove" model="sync.task">
        <field name="name">Remove</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="viber-integration--sync-project" />
        <field
            name="code"
        ><![CDATA[def handle_button():
    viber_api.unset_webhook()
        ]]></field>
    </record>
    <record id="viber_trigger_button_remove" model="sync.trigger.button">
        <field name="trigger_name">REMOVE_WEBHOOK_VIBER</field>
        <field name="name">Remove webhook viber</field>
        <field name="sync_task_id" ref="viber_task_remove"/>
        <field name="type_button">remove</field>
    </record>

    <record id="process-viber-events--sync-task" model="sync.task">
        <field name="name">Process Viber Events</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="viber-integration--sync-project" />
        <field
            name="code"
        ><![CDATA[
def handle_webhook(httprequest):
  data = json.loads(httprequest.data.decode("utf-8"))
  log("Raw data: %s" % data, LOG_DEBUG)

  if not viber_webhook_check(httprequest):
    return "no, thanks", 403

  viber_user_ref, vrequest = viber_webhook_parse(httprequest)
  log("Message type: %s" % vrequest , LOG_DEBUG)

  if not viber_user_ref:
    return

  if isinstance(vrequest, viber_requests.ViberConversationStartedRequest):
    start_text = f"Вітаю, я {bot.name}. Ми дуже щасливі бачити Вас в списку наших партнерів :). Щоб почати роботу з ботом введіть команду /start."
    viber_api.send_messages(viber_user_ref, [viber_messages.TextMessage(text=start_text)])
    return

  def partner_vals(viber_api, viber_user_ref):
    try:
        data = viber_api.get_user_details(viber_user_ref)
    except Exception as err:
        return {
          "name": "Viber user %s" % viber_user_ref,
          "comment": str(err),
        }
    return {
      "name": data["name"] +  "[" + bot.name + "]",
      "lang": get_lang(env, data.get("language", "").replace("-", "_")).code,
      "image_1920": url2base64(data.get("avatar")),
      "comment": str(data),
    }
  if isinstance(vrequest, viber_requests.ViberMessageRequest):
    partner_kwargs = dict(viber_api=viber_api, viber_user_ref=viber_user_ref)
    bot_id = bot.id
    partner = get_partner(bot_id, viber_user_ref, callback_func=partner_vals, callback_kwargs=partner_kwargs)

    if params.WEBHOOK_CHAT != "no":
      channel_name = partner.name
      operators_user_ids = bot.operator_ids.ids
      operators_partner_ids = env.user.browse(operators_user_ids).mapped("partner_id").ids
      partner_ids = [partner.id] + operators_partner_ids
      CONN_WITH_OPERATOR = True if get_link(VIBER_CHANNEL, viber_user_ref, bot_id) else False
      channels = None
      if data['message']['type'] == 'text':
        if vrequest.message.text == "/talk_with_operator":
          CONN_WITH_OPERATOR = True
      if CONN_WITH_OPERATOR:
        channels, is_new_channel = multi_livechat.get_channel(VIBER_CHANNEL, viber_user_ref, channel_name, partner_ids, bot_id)
        for operator in operators_user_ids:
          if not operator in channels[0].channel_partner_ids.ids:
            channels[0].write({"channel_partner_ids": partner_ids})

      if params.CHAT_MODEL != "res.partner" and CONN_WITH_OPERATOR:
        def thread_vals(partner):
          return {
            "name": partner.parent_id.name,
            "partner_id": partner.parent_id.id,
          }
        thread_kwargs = dict(partner=partner)
        record_message = """<b><a href="{channel_url}">Chat with partner is created.</a></b>""".format(
          channel_url=multi_livechat.get_channel_url(channels[0])
        )
        thread, is_new_thread = multi_livechat.get_thread(
          "%s:%s" % (VIBER_THREAD, params.CHAT_MODEL),
          viber_user_ref,
          thread_vals,
          thread_kwargs,
          params.CHAT_MODEL,
          record_message,
          bot_id
        )
        if is_new_thread:
          multi_livechat.message_post(channels[0],
          """<b><a href="{record_url}">Record is created. </a></b>""".format(
            record_url=multi_livechat.get_record_url(thread)
            ))

      odoo_message_text = None

      if data['message']['type'] == 'contact' and not partner.phone:
        set_state(partner.id,bot_id,'phone')
        partner.write({"phone": vrequest.message.contact.phone_number})
        set_state(partner.id,bot_id, 'None')
        check_partner(partner)
        viber_api.send_messages(viber_user_ref, [viber_messages.TextMessage(text="Дякую, дані збрежено."), keyboard_message])

      elif data['message']['type'] == 'text':

        if vrequest.message.text == "/user_data":
          check_partner(partner)
          email_text = "Напишіть вашу електронну адресу. Наприклад, max@gmail.com."
          set_state(partner.id,bot_id,'mail')
          viber_api.send_messages(viber_user_ref, [viber_messages.TextMessage(text=email_text), keyboard_message])
        elif get_state(partner.id, bot_id) == 'mail':
            email = vrequest.message.text
            validate_email(email, partner, viber_user_ref)
        elif vrequest.message.text == "/start":
          check_partner(partner)
          if not partner.email or not partner.phone:
            email_text = "Будь ласка, представте деякі особисті дані для продовження"
            viber_api.send_messages(viber_user_ref, [viber_messages.TextMessage(text=email_text), keyboard_message])
          else:
            viber_api.send_messages(viber_user_ref, [keyboard_message])
        elif CONN_WITH_OPERATOR:
          odoo_message_text = vrequest.message.text
          for channel in channels:
            message_post(is_new_thread, channel, odoo_message_text, author=partner.id)
        else:
            return

      elif data['message']['type'] in ('picture', 'video', 'document'):
        bin_data = url2bin(vrequest.message.media)
        file_name = data['message']['file_name']
        log("file_name=%s bin_data=%s" % (file_name, bin_data))
        # TODO: use message_post
        for channel in channels:
          channel.message_post(body="", author_id=partner.id,
            message_type="comment", subtype_xmlid="mail.mt_comment", attachments=[[file_name, bin_data]])

  elif isinstance(vrequest, viber_requests.ViberDeliveredRequest):
    # TODO
    pass
  elif isinstance(vrequest, viber_requests.ViberSeenRequest):
    # TODO
    pass
  else:
    odoo_message_text = str(data)
    log("type=%s" % type2str(vrequest))

def validate_email(email, partner, viber_user_ref):
  if re_match(r"[^@]+@[^@]+\.[^@]+", email):
    partner.write({"email" : email})
    check_partner(partner)
    set_state(partner.id, bot.id, 'None')
    viber_api.send_messages(viber_user_ref, [viber_messages.TextMessage(text="Дякую, дані збрежено."), keyboard_message])
  else:
    viber_api.send_messages(viber_user_ref, [viber_messages.TextMessage(text="Неправильно вказана пошта, повторіть спробу."), keyboard_message])

def message_post(is_new, *args, **kwargs):
    # TODO: move this code to main sync module
    if is_new:
      # post message Asynchronous to flush current pollings
      args = (False,) + args
      add_job('message_post')(*args, **kwargs)
    else:
      multi_livechat.message_post(*args, **kwargs)

]]></field>
    </record>
    <record id="viber--webhook-trigger" model="sync.trigger.webhook">
        <field name="trigger_name">VIBER</field>
        <field name="active" eval="True" />
        <field name="sync_task_id" ref="process-viber-events--sync-task" />
        <field name="webhook_type">json</field>
    </record>

    <record id="send-response-via-odoo--sync-task" model="sync.task">
        <field name="name">Send Response via Odoo</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="viber-integration--sync-project" />
        <field
            name="code"
        ><![CDATA[
def handle_db(records):
    for mail_message in records:
        process_message(mail_message)

def process_message(message):
    channel = env["mail.channel"].browse(message.res_id)

    bot_id = bot.id
    channel_link = channel.search_links(VIBER_CHANNEL, bot_id)
    if not channel_link:
        return

    external_user_ref = channel_link.external
    partner = get_partner(bot_id, external_user_ref)
    check_partner(partner)

    if partner.id == message.author_id.id or message.author_id.id == multi_livechat.odoobot_id:
        # this message is from partner or odoo bot
        return

    log("MESSAGE from odoo: channel_id %s - author_id %s - attachment_ids: %s - message_text: %s" % (message.res_id, message.author_id.id, message.attachment_ids, message.body), LOG_DEBUG)
    if message.body:
        text = "%s\n\n%s" % (html2plaintext(message.body), message.author_id.name)
        send_viber_message(external_user_ref, text)

    for attach in message.attachment_ids:
        attach_url = attach._public_url()
        log("ATTACHMENT public url: %s" % attach_url, LOG_DEBUG)

        if attach.mimetype and "/" in attach.mimetype and attach.mimetype.split("/")[0] == "image":
            if attach.file_size < MAX_PHOTO_SIZE:
                send_viber_photo(external_user_ref, attach_url)
            else:
                channel.message_post(body="You cannot send more than 1 MB for photos.",
                    author_id=multi_livechat.odoobot_id, message_type="comment", subtype_xmlid="mail.mt_comment")

        elif attach.mimetype and "/" in attach.mimetype and attach.mimetype.split("/")[0] == "video":
            if attach.file_size < MAX_VIDEO_SIZE:
                send_viber_file(external_user_ref, attach_url, attach.file_size, attach.name)
            else:
                channel.message_post(body="You cannot send more than 26 MB for videos.",
                    author_id=multi_livechat.odoobot_id, message_type="comment", subtype_xmlid="mail.mt_comment")
        else:
            if attach.file_size < MAX_DOC_SIZE:
                send_viber_file(external_user_ref, attach_url, attach.file_size, attach.name)
            else:
                channel.message_post(body="You cannot send more than 50 MB for documents.",
                    author_id=multi_livechat.odoobot_id, message_type="comment", subtype_xmlid="mail.mt_comment")

def send_viber_message(external_user_ref, text):
  viber_api.send_messages(external_user_ref, [viber_messages.TextMessage(text=text), keyboard_message])

def send_viber_photo(external_user_ref, media):
    viber_api.send_messages(external_user_ref, [viber_messages.PictureMessage(media=media), keyboard_message])

def send_viber_file(external_user_ref, media, size, file_name):
    viber_api.send_messages(external_user_ref, [viber_messages.FileMessage(media=media, size=size, file_name=file_name), keyboard_message])

]]></field>
    </record>
    <record id="on-message-posted--db-trigger" model="sync.trigger.automation">
        <field name="trigger_name">ON_MESSAGE_POSTED</field>
        <field name="active" eval="True" />
        <field name="sync_task_id" ref="send-response-via-odoo--sync-task" />
        <field name="model_id" ref="mail.model_mail_message" />
        <field name="trigger">on_create</field>
        <field name="filter_pre_domain" />
        <field name="filter_domain">['&amp;',["model","=","mail.channel"], ["author_id.type_messenger", "=", "none"]]</field>
    </record>

    <record id="send-to-everyone--sync-task" model="sync.task">
        <field name="name">Send to everyone</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="viber-integration--sync-project" />
        <field
            name="code"
        ><![CDATA[

def handle_db(records):
  if records.project_id.id != bot.id:
    return
  channel_links = env["sync.link"].search([('bot_id', '=', bot.id),('relation', '=', 'VIBER_CHANNEL')])
  if not channel_links:
      return
  external_user_refs = [channel.external for channel in channel_links]
  # link_body = records.link if records.link else ""
  # link_type = "open-url" if records.link else "none"
  # ntf = None
  # msg_row = 7 if records.msg and not records.url and not records.link and not records.image else 3

  # if records.url or records.msg or records.link or records.image:
  #   ntf = {

  #       "Type":"rich_media",
  #       "BgColor": "#fafafa",
  #       "Buttons": []
  #   }

  # if records.url:
  #   ntf["Buttons"].append({
  #             "Columns": 6,
  #             "Rows": 4,
  #             "ActionType": link_type,
  #             "ActionBody": link_body,
  #             "BgColor": "#ffffff",
  #             "Image": records.url,
  #             "Frame": {
  #               "BorderWidth" : 0,
  #               "CornerRadius": 10
  #             },
  #           })
  # if records.msg:
  #   ntf["Buttons"].append({
  #             "Columns": 6,
  #             "Rows": msg_row,
  #             "Text": "<font color='#323232'>{}</font>".format(records.msg),
  #             "ActionType": link_type,
  #             "ActionBody": link_body,
  #             "TextVAlign": "middle",
  #             "TextHAlign": "middle",
  #             "TextShouldFit": True,
  #             "BgColor": "#fafafa",
  #             "TextSize": "small",
  #           })
  # media = viber_messages.RichMediaMessage(rich_media=ntf, min_api_version=7)

  message = []

  if records.rich_media:
    message.append(rich_media)

  if records.msg:
     message.append(viber_messages.TextMessage(text=records.msg))

  for user_ref in external_user_refs:
      partner, is_new = get_partner_with_create(bot.id, user_ref)
      check_partner(partner)
      message.append(keyboard_message)
      send_viber_message(user_ref, message)


def send_viber_message(external_user_ref, message):
  viber_api.send_messages(external_user_ref, message)

]]></field>
    </record>
    <record id="send-to-everyone--db-trigger" model="sync.trigger.automation">
        <field name="trigger_name">SEND_TO_EVERYONE</field>
        <field name="active" eval="True" />
        <field name="sync_task_id" ref="send-to-everyone--sync-task" />
        <field name="model_id" ref="sync.model_send_to_everyone" />
        <field name="trigger">on_create</field>
    </record>
</odoo>
